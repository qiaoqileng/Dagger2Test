package com.green.dao.output;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DICT".
*/
public class DictDao extends AbstractDao<Dict, Long> {

    public static final String TABLENAME = "DICT";

    /**
     * Properties of entity Dict.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Entry_cout = new Property(5, String.class, "entry_cout", false, "ENTRY_COUT");
        public final static Property File_size = new Property(6, String.class, "file_size", false, "FILE_SIZE");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Status = new Property(8, Byte.class, "status", false, "STATUS");
    }


    public DictDao(DaoConfig config) {
        super(config);
    }
    
    public DictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DICT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"VERSION\" TEXT," + // 2: version
                "\"CATEGORY\" TEXT," + // 3: category
                "\"TYPE\" TEXT," + // 4: type
                "\"ENTRY_COUT\" TEXT," + // 5: entry_cout
                "\"FILE_SIZE\" TEXT," + // 6: file_size
                "\"CONTENT\" TEXT," + // 7: content
                "\"STATUS\" INTEGER);"); // 8: status
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DICT__id ON DICT" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DICT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dict entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String entry_cout = entity.getEntry_cout();
        if (entry_cout != null) {
            stmt.bindString(6, entry_cout);
        }
 
        String file_size = entity.getFile_size();
        if (file_size != null) {
            stmt.bindString(7, file_size);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        Byte status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dict entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String entry_cout = entity.getEntry_cout();
        if (entry_cout != null) {
            stmt.bindString(6, entry_cout);
        }
 
        String file_size = entity.getFile_size();
        if (file_size != null) {
            stmt.bindString(7, file_size);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        Byte status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dict readEntity(Cursor cursor, int offset) {
        Dict entity = new Dict( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // version
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // entry_cout
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // file_size
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dict entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEntry_cout(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFile_size(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dict entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dict entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dict entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

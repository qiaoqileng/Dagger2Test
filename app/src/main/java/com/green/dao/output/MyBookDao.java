package com.green.dao.output;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_BOOK".
*/
public class MyBookDao extends AbstractDao<MyBook, Long> {

    public static final String TABLENAME = "MY_BOOK";

    /**
     * Properties of entity MyBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Cover_url = new Property(3, String.class, "cover_url", false, "COVER_URL");
        public final static Property Content_url = new Property(4, String.class, "content_url", false, "CONTENT_URL");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Read_rate = new Property(6, Double.class, "read_rate", false, "READ_RATE");
        public final static Property Formats = new Property(7, String.class, "formats", false, "FORMATS");
        public final static Property Probation = new Property(8, Boolean.class, "probation", false, "PROBATION");
        public final static Property Bookmarks = new Property(9, String.class, "bookmarks", false, "BOOKMARKS");
        public final static Property Notes = new Property(10, String.class, "notes", false, "NOTES");
        public final static Property Remarks = new Property(11, String.class, "remarks", false, "REMARKS");
        public final static Property Folder = new Property(12, String.class, "folder", false, "FOLDER");
        public final static Property Last_read_time = new Property(13, Long.class, "last_read_time", false, "LAST_READ_TIME");
    }


    public MyBookDao(DaoConfig config) {
        super(config);
    }
    
    public MyBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"TITLE\" TEXT," + // 2: title
                "\"COVER_URL\" TEXT," + // 3: cover_url
                "\"CONTENT_URL\" TEXT," + // 4: content_url
                "\"AUTHOR\" TEXT," + // 5: author
                "\"READ_RATE\" REAL," + // 6: read_rate
                "\"FORMATS\" TEXT," + // 7: formats
                "\"PROBATION\" INTEGER," + // 8: probation
                "\"BOOKMARKS\" TEXT," + // 9: bookmarks
                "\"NOTES\" TEXT," + // 10: notes
                "\"REMARKS\" TEXT," + // 11: remarks
                "\"FOLDER\" TEXT," + // 12: folder
                "\"LAST_READ_TIME\" INTEGER);"); // 13: last_read_time
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MY_BOOK__id ON MY_BOOK" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(4, cover_url);
        }
 
        String content_url = entity.getContent_url();
        if (content_url != null) {
            stmt.bindString(5, content_url);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        Double read_rate = entity.getRead_rate();
        if (read_rate != null) {
            stmt.bindDouble(7, read_rate);
        }
 
        String formats = entity.getFormats();
        if (formats != null) {
            stmt.bindString(8, formats);
        }
 
        Boolean probation = entity.getProbation();
        if (probation != null) {
            stmt.bindLong(9, probation ? 1L: 0L);
        }
 
        String bookmarks = entity.getBookmarks();
        if (bookmarks != null) {
            stmt.bindString(10, bookmarks);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(11, notes);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(12, remarks);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(13, folder);
        }
 
        Long last_read_time = entity.getLast_read_time();
        if (last_read_time != null) {
            stmt.bindLong(14, last_read_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(4, cover_url);
        }
 
        String content_url = entity.getContent_url();
        if (content_url != null) {
            stmt.bindString(5, content_url);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        Double read_rate = entity.getRead_rate();
        if (read_rate != null) {
            stmt.bindDouble(7, read_rate);
        }
 
        String formats = entity.getFormats();
        if (formats != null) {
            stmt.bindString(8, formats);
        }
 
        Boolean probation = entity.getProbation();
        if (probation != null) {
            stmt.bindLong(9, probation ? 1L: 0L);
        }
 
        String bookmarks = entity.getBookmarks();
        if (bookmarks != null) {
            stmt.bindString(10, bookmarks);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(11, notes);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(12, remarks);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(13, folder);
        }
 
        Long last_read_time = entity.getLast_read_time();
        if (last_read_time != null) {
            stmt.bindLong(14, last_read_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyBook readEntity(Cursor cursor, int offset) {
        MyBook entity = new MyBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cover_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // read_rate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // formats
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // probation
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bookmarks
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // notes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remarks
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // folder
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // last_read_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCover_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRead_rate(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setFormats(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProbation(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setBookmarks(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNotes(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemarks(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFolder(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLast_read_time(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyBook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
